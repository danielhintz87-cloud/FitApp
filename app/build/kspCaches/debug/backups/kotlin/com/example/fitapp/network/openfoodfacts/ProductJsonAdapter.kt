// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.fitapp.network.openfoodfacts

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ProductJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Product>() {
  private val options: JsonReader.Options = JsonReader.Options.of("code", "product_name",
      "product_name_de", "brands", "categories", "image_url", "image_front_url",
      "image_front_small_url", "serving_size", "serving_quantity", "quantity", "packaging",
      "labels", "stores", "countries", "ingredients_text", "ingredients_text_de", "allergens",
      "traces", "nutriments", "nutrition_grades", "nova_group", "ecoscore_grade",
      "nutriscore_grade")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "code")

  private val nullableDoubleAdapter: JsonAdapter<Double?> =
      moshi.adapter(Double::class.javaObjectType, emptySet(), "servingQuantity")

  private val nullableNutrimentsAdapter: JsonAdapter<Nutriments?> =
      moshi.adapter(Nutriments::class.java, emptySet(), "nutriments")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "novaGroup")

  override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Product").append(')') }

  override fun fromJson(reader: JsonReader): Product {
    var code: String? = null
    var productName: String? = null
    var productNameDe: String? = null
    var brands: String? = null
    var categories: String? = null
    var imageUrl: String? = null
    var imageFrontUrl: String? = null
    var imageFrontSmallUrl: String? = null
    var servingSize: String? = null
    var servingQuantity: Double? = null
    var quantity: String? = null
    var packaging: String? = null
    var labels: String? = null
    var stores: String? = null
    var countries: String? = null
    var ingredientsText: String? = null
    var ingredientsTextDe: String? = null
    var allergens: String? = null
    var traces: String? = null
    var nutriments: Nutriments? = null
    var nutritionGrades: String? = null
    var novaGroup: Int? = null
    var ecoscoreGrade: String? = null
    var nutriscoreGrade: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> code = nullableStringAdapter.fromJson(reader)
        1 -> productName = nullableStringAdapter.fromJson(reader)
        2 -> productNameDe = nullableStringAdapter.fromJson(reader)
        3 -> brands = nullableStringAdapter.fromJson(reader)
        4 -> categories = nullableStringAdapter.fromJson(reader)
        5 -> imageUrl = nullableStringAdapter.fromJson(reader)
        6 -> imageFrontUrl = nullableStringAdapter.fromJson(reader)
        7 -> imageFrontSmallUrl = nullableStringAdapter.fromJson(reader)
        8 -> servingSize = nullableStringAdapter.fromJson(reader)
        9 -> servingQuantity = nullableDoubleAdapter.fromJson(reader)
        10 -> quantity = nullableStringAdapter.fromJson(reader)
        11 -> packaging = nullableStringAdapter.fromJson(reader)
        12 -> labels = nullableStringAdapter.fromJson(reader)
        13 -> stores = nullableStringAdapter.fromJson(reader)
        14 -> countries = nullableStringAdapter.fromJson(reader)
        15 -> ingredientsText = nullableStringAdapter.fromJson(reader)
        16 -> ingredientsTextDe = nullableStringAdapter.fromJson(reader)
        17 -> allergens = nullableStringAdapter.fromJson(reader)
        18 -> traces = nullableStringAdapter.fromJson(reader)
        19 -> nutriments = nullableNutrimentsAdapter.fromJson(reader)
        20 -> nutritionGrades = nullableStringAdapter.fromJson(reader)
        21 -> novaGroup = nullableIntAdapter.fromJson(reader)
        22 -> ecoscoreGrade = nullableStringAdapter.fromJson(reader)
        23 -> nutriscoreGrade = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Product(
        code = code,
        productName = productName,
        productNameDe = productNameDe,
        brands = brands,
        categories = categories,
        imageUrl = imageUrl,
        imageFrontUrl = imageFrontUrl,
        imageFrontSmallUrl = imageFrontSmallUrl,
        servingSize = servingSize,
        servingQuantity = servingQuantity,
        quantity = quantity,
        packaging = packaging,
        labels = labels,
        stores = stores,
        countries = countries,
        ingredientsText = ingredientsText,
        ingredientsTextDe = ingredientsTextDe,
        allergens = allergens,
        traces = traces,
        nutriments = nutriments,
        nutritionGrades = nutritionGrades,
        novaGroup = novaGroup,
        ecoscoreGrade = ecoscoreGrade,
        nutriscoreGrade = nutriscoreGrade
    )
  }

  override fun toJson(writer: JsonWriter, value_: Product?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("code")
    nullableStringAdapter.toJson(writer, value_.code)
    writer.name("product_name")
    nullableStringAdapter.toJson(writer, value_.productName)
    writer.name("product_name_de")
    nullableStringAdapter.toJson(writer, value_.productNameDe)
    writer.name("brands")
    nullableStringAdapter.toJson(writer, value_.brands)
    writer.name("categories")
    nullableStringAdapter.toJson(writer, value_.categories)
    writer.name("image_url")
    nullableStringAdapter.toJson(writer, value_.imageUrl)
    writer.name("image_front_url")
    nullableStringAdapter.toJson(writer, value_.imageFrontUrl)
    writer.name("image_front_small_url")
    nullableStringAdapter.toJson(writer, value_.imageFrontSmallUrl)
    writer.name("serving_size")
    nullableStringAdapter.toJson(writer, value_.servingSize)
    writer.name("serving_quantity")
    nullableDoubleAdapter.toJson(writer, value_.servingQuantity)
    writer.name("quantity")
    nullableStringAdapter.toJson(writer, value_.quantity)
    writer.name("packaging")
    nullableStringAdapter.toJson(writer, value_.packaging)
    writer.name("labels")
    nullableStringAdapter.toJson(writer, value_.labels)
    writer.name("stores")
    nullableStringAdapter.toJson(writer, value_.stores)
    writer.name("countries")
    nullableStringAdapter.toJson(writer, value_.countries)
    writer.name("ingredients_text")
    nullableStringAdapter.toJson(writer, value_.ingredientsText)
    writer.name("ingredients_text_de")
    nullableStringAdapter.toJson(writer, value_.ingredientsTextDe)
    writer.name("allergens")
    nullableStringAdapter.toJson(writer, value_.allergens)
    writer.name("traces")
    nullableStringAdapter.toJson(writer, value_.traces)
    writer.name("nutriments")
    nullableNutrimentsAdapter.toJson(writer, value_.nutriments)
    writer.name("nutrition_grades")
    nullableStringAdapter.toJson(writer, value_.nutritionGrades)
    writer.name("nova_group")
    nullableIntAdapter.toJson(writer, value_.novaGroup)
    writer.name("ecoscore_grade")
    nullableStringAdapter.toJson(writer, value_.ecoscoreGrade)
    writer.name("nutriscore_grade")
    nullableStringAdapter.toJson(writer, value_.nutriscoreGrade)
    writer.endObject()
  }
}
