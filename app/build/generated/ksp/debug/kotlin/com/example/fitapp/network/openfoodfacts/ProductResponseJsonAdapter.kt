// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.fitapp.network.openfoodfacts

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ProductResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<ProductResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("status", "status_verbose",
      "product")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "status")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "statusVerbose")

  private val nullableProductAdapter: JsonAdapter<Product?> = moshi.adapter(Product::class.java,
      emptySet(), "product")

  override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("ProductResponse").append(')') }

  override fun fromJson(reader: JsonReader): ProductResponse {
    var status: Int? = null
    var statusVerbose: String? = null
    var product: Product? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> status = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("status", "status",
            reader)
        1 -> statusVerbose = nullableStringAdapter.fromJson(reader)
        2 -> product = nullableProductAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ProductResponse(
        status = status ?: throw Util.missingProperty("status", "status", reader),
        statusVerbose = statusVerbose,
        product = product
    )
  }

  override fun toJson(writer: JsonWriter, value_: ProductResponse?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("status")
    intAdapter.toJson(writer, value_.status)
    writer.name("status_verbose")
    nullableStringAdapter.toJson(writer, value_.statusVerbose)
    writer.name("product")
    nullableProductAdapter.toJson(writer, value_.product)
    writer.endObject()
  }
}
