// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.fitapp.network.openfoodfacts

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class SearchResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<SearchResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("count", "page", "page_count",
      "page_size", "products")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "count")

  private val listOfProductAdapter: JsonAdapter<List<Product>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Product::class.java), emptySet(),
      "products")

  override fun toString(): String = buildString(36) {
      append("GeneratedJsonAdapter(").append("SearchResponse").append(')') }

  override fun fromJson(reader: JsonReader): SearchResponse {
    var count: Int? = null
    var page: Int? = null
    var pageCount: Int? = null
    var pageSize: Int? = null
    var products: List<Product>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> count = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("count", "count",
            reader)
        1 -> page = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("page", "page", reader)
        2 -> pageCount = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("pageCount",
            "page_count", reader)
        3 -> pageSize = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("pageSize",
            "page_size", reader)
        4 -> products = listOfProductAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("products", "products", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return SearchResponse(
        count = count ?: throw Util.missingProperty("count", "count", reader),
        page = page ?: throw Util.missingProperty("page", "page", reader),
        pageCount = pageCount ?: throw Util.missingProperty("pageCount", "page_count", reader),
        pageSize = pageSize ?: throw Util.missingProperty("pageSize", "page_size", reader),
        products = products ?: throw Util.missingProperty("products", "products", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value_: SearchResponse?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("count")
    intAdapter.toJson(writer, value_.count)
    writer.name("page")
    intAdapter.toJson(writer, value_.page)
    writer.name("page_count")
    intAdapter.toJson(writer, value_.pageCount)
    writer.name("page_size")
    intAdapter.toJson(writer, value_.pageSize)
    writer.name("products")
    listOfProductAdapter.toJson(writer, value_.products)
    writer.endObject()
  }
}
