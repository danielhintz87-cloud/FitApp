package com.example.fitapp.services

/**
 * Shopping List Sorting and Grouping Strategies
 * Provides different ways to organize shopping list items
 */
object ShoppingListSorter {
    /**
     * Available sorting modes
     */
    enum class SortingMode {
        SUPERMARKET_LAYOUT, // Nach typischem Supermarkt-Layout
        ALPHABETICAL, // Alphabetisch nach Namen
        CATEGORY_ALPHABETICAL, // Nach Kategorie, dann alphabetisch
        PRIORITY, // Nach Priorit√§t (urgent zuerst)
        RECENTLY_ADDED, // Zuletzt hinzugef√ºgt zuerst
        STATUS, // Gekauft/Nicht gekauft
    }

    /**
     * Supermarket layout order - realistic German supermarket flow
     */
    private val supermarketLayout =
        mapOf(
            // Entrance area
            "Obst & Gem√ºse" to 1,
            "Frische Kr√§uter" to 2,
            "N√ºsse & Trockenfr√ºchte" to 3,
            // Fresh sections
            "B√§ckerei" to 4,
            "Fleisch & Wurst" to 5,
            "Fisch & Meeresfr√ºchte" to 6,
            "Milchprodukte" to 7,
            "Eier" to 8,
            "K√§se" to 9,
            // Pantry aisles
            "Getreide & M√ºsli" to 10,
            "Nudeln & Reis" to 11,
            "Konserven" to 12,
            "So√üen & Dressings" to 13,
            "√ñl & Essig" to 14,
            "Gew√ºrze & Kr√§uter" to 15,
            "S√º√üwaren & Snacks" to 16,
            "Backzutaten" to 17,
            // Frozen section
            "Tiefk√ºhl" to 18,
            "Eis" to 19,
            // Beverages
            "Wasser & Erfrischungsgetr√§nke" to 20,
            "S√§fte" to 21,
            "Kaffee & Tee" to 22,
            "Alkoholische Getr√§nke" to 23,
            // Non-food
            "Haushalt & Reinigung" to 24,
            "K√∂rperpflege" to 25,
            "Baby & Kind" to 26,
            "Sonstiges" to 27,
        )

    /**
     * Enhanced ingredient categorization
     */
    private val ingredientCategories =
        mapOf(
            // Obst & Gem√ºse
            "√§pfel" to "Obst & Gem√ºse", "bananen" to "Obst & Gem√ºse", "tomaten" to "Obst & Gem√ºse",
            "kartoffeln" to "Obst & Gem√ºse", "zwiebeln" to "Obst & Gem√ºse", "m√∂hren" to "Obst & Gem√ºse",
            "paprika" to "Obst & Gem√ºse", "gurken" to "Obst & Gem√ºse", "salat" to "Obst & Gem√ºse",
            "zitronen" to "Obst & Gem√ºse", "orangen" to "Obst & Gem√ºse", "brokkoli" to "Obst & Gem√ºse",
            "spinat" to "Obst & Gem√ºse", "champignons" to "Obst & Gem√ºse", "avocado" to "Obst & Gem√ºse",
            // Fleisch & Wurst
            "h√§hnchen" to "Fleisch & Wurst", "rind" to "Fleisch & Wurst", "schwein" to "Fleisch & Wurst",
            "hackfleisch" to "Fleisch & Wurst", "w√ºrstchen" to "Fleisch & Wurst", "salami" to "Fleisch & Wurst",
            "schinken" to "Fleisch & Wurst", "speck" to "Fleisch & Wurst",
            // Fisch & Meeresfr√ºchte
            "lachs" to "Fisch & Meeresfr√ºchte", "thunfisch" to "Fisch & Meeresfr√ºchte",
            "garnelen" to "Fisch & Meeresfr√ºchte", "kabeljau" to "Fisch & Meeresfr√ºchte",
            // Milchprodukte
            "milch" to "Milchprodukte", "butter" to "Milchprodukte", "joghurt" to "Milchprodukte",
            "quark" to "Milchprodukte", "sahne" to "Milchprodukte", "schmand" to "Milchprodukte",
            "cr√®me fra√Æche" to "Milchprodukte", "mascarpone" to "Milchprodukte",
            // Eier
            "eier" to "Eier", "ei" to "Eier",
            // K√§se
            "k√§se" to "K√§se", "gouda" to "K√§se", "emmental" to "K√§se", "mozzarella" to "K√§se",
            "parmesan" to "K√§se", "feta" to "K√§se", "camembert" to "K√§se",
            // Getreide & M√ºsli
            "haferflocken" to "Getreide & M√ºsli", "m√ºsli" to "Getreide & M√ºsli",
            "cornflakes" to "Getreide & M√ºsli", "quinoa" to "Getreide & M√ºsli",
            // Nudeln & Reis
            "nudeln" to "Nudeln & Reis", "spaghetti" to "Nudeln & Reis", "reis" to "Nudeln & Reis",
            "penne" to "Nudeln & Reis", "fusilli" to "Nudeln & Reis", "basmati" to "Nudeln & Reis",
            // B√§ckerei
            "brot" to "B√§ckerei", "br√∂tchen" to "B√§ckerei", "toast" to "B√§ckerei",
            "croissant" to "B√§ckerei", "bagel" to "B√§ckerei",
            // Konserven
            "tomaten dose" to "Konserven", "bohnen dose" to "Konserven", "mais dose" to "Konserven",
            "thunfisch dose" to "Konserven", "kokosmilch" to "Konserven",
            // Gew√ºrze & Kr√§uter
            "salz" to "Gew√ºrze & Kr√§uter", "pfeffer" to "Gew√ºrze & Kr√§uter", "paprika pulver" to "Gew√ºrze & Kr√§uter",
            "oregano" to "Gew√ºrze & Kr√§uter", "basilikum" to "Gew√ºrze & Kr√§uter", "thymian" to "Gew√ºrze & Kr√§uter",
            "petersilie" to "Frische Kr√§uter", "schnittlauch" to "Frische Kr√§uter", "dill" to "Frische Kr√§uter",
            // √ñl & Essig
            "oliven√∂l" to "√ñl & Essig", "sonnenblumen√∂l" to "√ñl & Essig", "balsamico" to "√ñl & Essig",
            "essig" to "√ñl & Essig", "sesam√∂l" to "√ñl & Essig",
            // So√üen & Dressings
            "ketchup" to "So√üen & Dressings", "senf" to "So√üen & Dressings", "mayo" to "So√üen & Dressings",
            "sojasauce" to "So√üen & Dressings", "worcestershire" to "So√üen & Dressings",
            // Backzutaten
            "mehl" to "Backzutaten", "zucker" to "Backzutaten", "backpulver" to "Backzutaten",
            "vanillezucker" to "Backzutaten", "hefe" to "Backzutaten",
            // S√º√üwaren & Snacks
            "schokolade" to "S√º√üwaren & Snacks", "chips" to "S√º√üwaren & Snacks", "kekse" to "S√º√üwaren & Snacks",
            "n√ºsse" to "N√ºsse & Trockenfr√ºchte", "mandeln" to "N√ºsse & Trockenfr√ºchte",
            // Tiefk√ºhl
            "erbsen tk" to "Tiefk√ºhl", "spinat tk" to "Tiefk√ºhl", "pizza" to "Tiefk√ºhl",
            "pommes" to "Tiefk√ºhl", "eis" to "Eis",
            // Getr√§nke
            "wasser" to "Wasser & Erfrischungsgetr√§nke", "sprudel" to "Wasser & Erfrischungsgetr√§nke",
            "cola" to "Wasser & Erfrischungsgetr√§nke", "apfelsaft" to "S√§fte", "orangensaft" to "S√§fte",
            "kaffee" to "Kaffee & Tee", "tee" to "Kaffee & Tee", "bier" to "Alkoholische Getr√§nke",
            "wein" to "Alkoholische Getr√§nke",
            // Haushalt
            "sp√ºlmittel" to "Haushalt & Reinigung", "toilettenpapier" to "Haushalt & Reinigung",
            "waschmittel" to "Haushalt & Reinigung", "k√ºchenrollen" to "Haushalt & Reinigung",
            // K√∂rperpflege
            "zahnpasta" to "K√∂rperpflege", "shampoo" to "K√∂rperpflege", "seife" to "K√∂rperpflege",
            "deodorant" to "K√∂rperpflege",
        )

    /**
     * Categorize ingredient by name
     */
    fun categorizeIngredient(name: String): String {
        val lowerName = name.lowercase()

        // Direct match first
        ingredientCategories[lowerName]?.let { return it }

        // Partial matches
        for ((keyword, category) in ingredientCategories) {
            if (lowerName.contains(keyword) || keyword.contains(lowerName)) {
                return category
            }
        }

        return "Sonstiges"
    }

    /**
     * Get supermarket order for category
     */
    fun getSupermarketOrder(category: String): Int {
        return supermarketLayout[category] ?: 999
    }

    /**
     * Sort shopping list items by selected mode
     */
    fun sortItems(
        items: List<ShoppingListManager.ShoppingListItem>,
        mode: SortingMode,
    ): Map<String, List<ShoppingListManager.ShoppingListItem>> {
        return when (mode) {
            SortingMode.SUPERMARKET_LAYOUT -> sortBySupermarketLayout(items)
            SortingMode.ALPHABETICAL -> sortAlphabetically(items)
            SortingMode.CATEGORY_ALPHABETICAL -> sortByCategoryAlphabetical(items)
            SortingMode.PRIORITY -> sortByPriority(items)
            SortingMode.RECENTLY_ADDED -> sortByRecentlyAdded(items)
            SortingMode.STATUS -> sortByStatus(items)
        }
    }

    private fun sortBySupermarketLayout(
        items: List<ShoppingListManager.ShoppingListItem>,
    ): Map<String, List<ShoppingListManager.ShoppingListItem>> {
        return items
            .groupBy { categorizeIngredient(it.name) }
            .toSortedMap(compareBy { getSupermarketOrder(it) })
            .mapValues { (_, items) ->
                items.sortedWith(
                    compareBy<ShoppingListManager.ShoppingListItem> { it.isPurchased }
                        .thenBy { it.name },
                )
            }
    }

    private fun sortAlphabetically(
        items: List<ShoppingListManager.ShoppingListItem>,
    ): Map<String, List<ShoppingListManager.ShoppingListItem>> {
        val sorted =
            items.sortedWith(
                compareBy<ShoppingListManager.ShoppingListItem> { it.isPurchased }
                    .thenBy { it.name },
            )
        return mapOf("Alle Artikel (A-Z)" to sorted)
    }

    private fun sortByCategoryAlphabetical(
        items: List<ShoppingListManager.ShoppingListItem>,
    ): Map<String, List<ShoppingListManager.ShoppingListItem>> {
        return items
            .groupBy { categorizeIngredient(it.name) }
            .toSortedMap() // Kategorien alphabetisch
            .mapValues { (_, items) ->
                items.sortedWith(
                    compareBy<ShoppingListManager.ShoppingListItem> { it.isPurchased }
                        .thenBy { it.name },
                )
            }
    }

    private fun sortByPriority(
        items: List<ShoppingListManager.ShoppingListItem>,
    ): Map<String, List<ShoppingListManager.ShoppingListItem>> {
        val grouped =
            items.groupBy {
                when {
                    it.isPurchased -> "‚úÖ Erledigt"
                    it.priority == ShoppingListManager.Priority.URGENT -> "üî¥ Dringend"
                    it.priority == ShoppingListManager.Priority.HIGH -> "üü° Wichtig"
                    else -> "‚ö™ Normal"
                }
            }

        // Custom order for priority groups
        val priorityOrder = listOf("üî¥ Dringend", "üü° Wichtig", "‚ö™ Normal", "‚úÖ Erledigt")
        return priorityOrder.mapNotNull { key ->
            grouped[key]?.let { items ->
                key to items.sortedBy { it.name }
            }
        }.toMap()
    }

    private fun sortByRecentlyAdded(
        items: List<ShoppingListManager.ShoppingListItem>,
    ): Map<String, List<ShoppingListManager.ShoppingListItem>> {
        val sorted =
            items.sortedWith(
                compareBy<ShoppingListManager.ShoppingListItem> { it.isPurchased }
                    .thenByDescending { it.id }, // ID ist timestamp-based
            )
        return mapOf("Zuletzt hinzugef√ºgt" to sorted)
    }

    private fun sortByStatus(
        items: List<ShoppingListManager.ShoppingListItem>,
    ): Map<String, List<ShoppingListManager.ShoppingListItem>> {
        return items.groupBy {
            if (it.isPurchased) "‚úÖ Erledigt" else "üìã Zu kaufen"
        }.mapValues { (_, items) ->
            items.sortedBy { it.name }
        }
    }
}
